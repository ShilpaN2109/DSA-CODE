'''''
A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Return the index of the celebrity, if there is no celebrity return -1.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)
'''''
class Solution:
    
    #Function to find if there is a celebrity in the party or not.
    def celebrity(self, M, n):
        # code here 
        s= []
        for i in range(n):
            s.append(i)
        while len(s)>1:
            A = s.pop()
            B = s.pop()
            if M[A][B]==1:
                s.append(B)
            else:
                s.append(A)
        candidate=s.pop()
        
        row_check=False
        zero_count=0
        for i in range(n):
            if M[candidate][i]==0:
                zero_count+=1
        if zero_count==n:
            row_check=True
        
        col_check=False
        one_count=0
        for i in range(n):
            if M[i][candidate]==1:
                one_count+=1
        
        if one_count==n-1:
            col_check=True  
        if row_check==True and col_check==True:
        
            return candidate
        else: 
            return -1
 
